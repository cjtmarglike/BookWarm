<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.book.warm.mapper.ReviewBoardMapper">
 
 	<select id="selectBoardList" resultType="com.book.warm.vo.ReviewMainVO">
 	
 		select * from
		(
		    select review_no, user_id, review_written_date, review_modify_date, isbn, 
		    	review_ref, review_title, review_content, review_open, 
		    	rank() over(partition by isbn order by review_modify_date desc, review_no desc) rk 
		    from review_board
		) sub, book b
		where sub.rk = 1 and sub.isbn=b.isbn
		and user_id = #{user_id}
		
 	</select>
 	
 	<select id="getBoardListCount" resultType="int">
 		
 		select count(distinct isbn) from review_board where user_id=#{user_id}
		
 	</select>
 	
 	<select id="selectBoardListWithPaging" resultType="com.book.warm.vo.ReviewMainVO">
 	
 		<![CDATA[
	 		select review_no, user_id, review_written_date, review_modify_date, isbn, review_ref, review_title, review_content, 
			    	review_open, book_title, writer_name, book_img
			from(
			    select rownum rn, review_no, user_id, review_written_date, review_modify_date, b.isbn, review_ref, review_title, review_content, 
			    review_open, book_title, writer_name, book_img
			    from
			            (
			                select review_no, user_id, review_written_date, review_modify_date, isbn, 
			                    review_ref, review_title, review_content, review_open, 
			                    rank() over(partition by isbn order by review_modify_date desc, review_no desc) rk 
			                from review_board
			            ) sub, book b
			    where sub.rk = 1 and sub.isbn=b.isbn and user_id = #{param1}
			    and rownum <= #{param2.pageNum} * #{param2.amount} 
			)
			where rn > (#{param2.pageNum}-1) * #{param2.amount}
 		]]>
 	
 	</select>
 	
 	<select id="getListPerBook" resultType="com.book.warm.vo.ReviewBoardVO">
 		select * from review_board where isbn = #{param1} and user_id = #{param2} 
 		order by review_written_date desc
 	</select>
 	
 	<select id="getListPerBookWithPaging" resultType="com.book.warm.vo.ReviewBoardVO">
 	
		<![CDATA[
		 select 
		 	review_no, user_id, review_written_date, review_modify_date,
			isbn, review_ref, review_title, review_content, review_open
		 from
		 	(
		 	select /*+INDEX_DESC(review_board pk_review_board) */
		 		rownum rn, review_no, user_id, review_written_date, review_modify_date,
				isbn, review_ref, review_title, review_content, review_open
		 	from review_board where (isbn = #{param1} and user_id = #{param2})
		 	and rownum <=#{param3.pageNum} * #{param3.amount} 
		 	)
		 where rn > (#{param3.pageNum}-1) * #{param3.amount}
		]]> 	
 	
 	</select>
 	
 	<select id="getTotalCount" resultType="int">
 		
 		select count(*) from review_board where isbn = #{param2} and user_id = #{param3} 
 		order by review_written_date desc
 	
 	</select>
 	
 	<!-- <select id="showBookThumbnail" resultType="com.book.warm.vo.BookVO">
 		select book_img, book_title, writer_name, isbn
		from book
		where isbn = #{isbn} 
		
 	</select> -->
 	
 	<select id="selectedReview" resultType="com.book.warm.vo.ReviewBoardVO">
 		select * from review_board where review_no = #{review_no}
 	</select>
 	
 	<select id="bookInfo" resultType="com.book.warm.vo.BookVO">
 		select * from book where isbn = #{isbn}
 	</select>
 	
 	<insert id="registerReview" parameterType="com.book.warm.vo.ReviewBoardVO">
 		insert into review_board
 				(
 				review_no, user_id,
 				isbn, review_ref, review_title, review_content, review_open
 				) 
		values (
				review_board_seq.nextval, #{user_id}, #{isbn}, #{review_ref}, 
 		 		#{review_title}, #{review_content}, #{review_open}
 		 		)
 	</insert>
 	
 	<insert id="registerReviewSelectKey" parameterType="com.book.warm.vo.ReviewBoardVO">
 		<selectKey keyProperty="review_no" order="BEFORE" resultType="int">
 			select review_board_seq.nextval from dual
 		</selectKey>
 		
 		insert into review_board
 				(
 				review_no, user_id,
 				isbn, review_ref, review_title, review_content, review_open
 				) 
		values (
				#{review_no}, #{user_id}, #{isbn}, #{review_ref}, 
 		 		#{review_title}, #{review_content}, #{review_open}
 		 		)
 	</insert>
 	
 	<delete id="deleteReview">
 		delete from review_board where user_id=#{user_id} and review_no=#{review_no}
 	</delete>
 	
 	<update id="modifyReview">
 		update review_board
		set review_modify_date=sysdate, review_title=#{review_title}, review_content=#{review_content},
    		review_ref=#{review_ref}, review_open=#{review_open}
		where user_id=#{user_id} and review_no=#{review_no}
 	</update>
 	
 	<update id="modifyReviewAdmin">
 		update review_board
		set review_title='삭제된 게시글 입니다.', review_content='운영 원칙에 위반된 게시글입니다.', review_open='true'
		where review_no=#{review_no}
 	</update>
 	<!-- 공개 설정된 리뷰 불러오기 -->
 	<select id="getOpenReview" resultType="com.book.warm.vo.ReviewBoardVO">
 		select * from review_board where review_open='checked' order by review_modify_date desc
 	</select>
 	
 	
 	<!-- 첨부파일 처리. 따로 mapper를 만들지 않고 여기에 추가. -->
 	<insert id="insert">
 		insert into review_attach(uuid, uploadpath, filename, review_no)
 		values (#{uuid}, #{uploadPath}, #{fileName}, #{review_no})
 	</insert>
 
 	<delete id="delete">
 		delete from review_attach where uuid = #{uuid}
 	</delete>
	
	<select id="findByReviewNo" resultType="com.book.warm.vo.ReviewAttachVO">
		select * from review_attach where review_no = #{review_no}
	</select>
	
	<delete id="deleteAll">
		delete review_attach where review_no = #{review_no}
	</delete>
	
	<select id="getOldFiles" resultType="com.book.warm.vo.ReviewAttachVO">
		select * from review_attach where uploadpath = to_char(sysdate -1, 'yyyy\mm\dd')
	</select>
	
	<!-- 모든 쿠폰을 가져온다. -->	
	<select id="compareCouponTime" resultType="com.book.warm.vo.CouponNoVO">
	<![CDATA[
		select cn.*
		from coupon c inner join coupon_no cn
		on cn.coupon_no = c.coupon_no
		where cn.coupon_available='t'
		and c.coupon_validate<sysdate
	]]> 
	</select>
	
	<update id="changeCouponAvailable" parameterType="com.book.warm.vo.CouponNoVO">
		update coupon_no
		set coupon_available='f'
		where coupon_no=#{coupon_no}
		and user_id=#{user_id}
	</update>
	
	<select id="getLibNewbie" resultType="com.book.warm.vo.BookVO">
		<!-- 가장 최근 서재에 담은 책의 표지와 isbn을 가져온다. -->
		select isbn, book_title, book_img from (
		    select b.isbn, b.book_img, b.book_title, rank() over(order by list_added_date desc) rk from library l, book b
		    where user_id = #{user_id} and l.isbn = b.isbn)
		where rk = 1
	</select>
	
 </mapper>